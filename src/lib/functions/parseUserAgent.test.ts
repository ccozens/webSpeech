import { describe, expect, it } from 'vitest';
import { parseUserAgent } from './parseUserAgent';

// Generated by CodiumAI

describe('parseUserAgent', () => {

    // Tests that the function returns the correct device name and type for a valid user agent string
    it('should return the correct device name and type for a valid user agent string', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns 'Unknown' device name and 'other' type for an invalid user agent string
    it('should return "Unknown" device name and "other" type for an invalid user agent string', () => {
      const userAgent = 'Invalid User Agent';
      const expectedDevice = { name: 'Unknown', type: 'other' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with multiple matches
    it('should return the correct device name and type for a user agent string with multiple matches', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with partial matches
    it('should return the correct device name and type for a user agent string with partial matches', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with uppercase characters
    it('should return the correct device name and type for a user agent string with uppercase characters', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with leading/trailing spaces
    it('should return the correct device name and type for a user agent string with leading/trailing spaces', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with multiple spaces between words
    it('should return the correct device name and type for a user agent string with multiple spaces between words', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with non-ASCII characters
    it('should return the correct device name and type for a user agent string with non-ASCII characters', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36 ðŸŒŸ';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a user agent string with no spaces between words
    it('should return the correct device name and type for a user agent string with no spaces between words', () => {
      const userAgent = 'Mozilla/5.0(Linux;Android10;SM-G975F)AppleWebKit/537.36(KHTML,likeGecko)Chrome/87.0.4280.141MobileSafari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });

    // Tests that the function returns the correct device name and type for a valid user agent string
    it('should return the correct device name and type for a valid user agent string', () => {
      const userAgent = 'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36';
      const expectedDevice = { name: 'Android', type: 'mobile' };
      const actualDevice = parseUserAgent(userAgent);
      expect(actualDevice).toEqual(expectedDevice);
    });
});
